{"mappings":"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","sources":["src/loaders/main.ts"],"sourcesContent":["class lv {\r\n    /**\r\n     * iterates through all elements and calls function create on them\r\n     */\r\n    public initLoaderAll(): void {\r\n        let divs = document.getElementsByTagName(\"DIV\");\r\n        for (let i = 0; i < divs.length; i++) {\r\n            if (!divs[i].hasChildNodes()) {\r\n                lv.create(<HTMLDivElement>divs[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns list of non-main classes (every except the one that specifies the element)\r\n     * @param classList\r\n     * @param notIncludingClass\r\n     */\r\n    private static getModifyingClasses(classList: Array<string>, notIncludingClass: string): string[] {\r\n        let modifyingClasses: string[] = [];\r\n        for (let i = 0; i < classList.length; i++) {\r\n            if (classList[i] != notIncludingClass) {\r\n                modifyingClasses.push(classList[i]);\r\n            }\r\n        }\r\n        return modifyingClasses;\r\n    }\r\n\r\n    /**\r\n     * decides type of passed element and returns its object\r\n     * @param element - pass existing element or null\r\n     * @param classString - classes separated with one space that specifies type of element, optional, only when passing null instead of element\r\n     */\r\n    public static create(element: HTMLDivElement = null, classString?: string): lv.ElementBase {\r\n        let classes : Array<string> = [];\r\n        if (element != null) {\r\n            let listOfClasses = element.classList;\r\n            for (let i = 0; i < listOfClasses.length; i++) {\r\n                classes.push(listOfClasses[i]);\r\n            }\r\n        } else if (classString != null) {\r\n            classes = classString.split(\" \");\r\n        }\r\n        for (let i = 0; i < classes.length; i++) {\r\n            switch (classes[i]) {\r\n                case \"lv-bars\":\r\n                    return new lv.Circle(element, lv.CircleType.Bars, lv.getModifyingClasses(classes, \"lv-bars\"));\r\n                case \"lv-squares\":\r\n                    return new lv.Circle(element, lv.CircleType.Squares, lv.getModifyingClasses(classes, \"lv-squares\"));\r\n                case \"lv-circles\":\r\n                    return new lv.Circle(element, lv.CircleType.Circles, lv.getModifyingClasses(classes, \"lv-circles\"));\r\n                case \"lv-dots\":\r\n                    return new lv.Circle(element, lv.CircleType.Dots, lv.getModifyingClasses(classes, \"lv-dots\"));\r\n                case \"lv-spinner\":\r\n                    return new lv.Circle(element, lv.CircleType.Spinner, lv.getModifyingClasses(classes, \"lv-spinner\"));\r\n                case \"lv-dashed\":\r\n                    return new lv.Circle(element, lv.CircleType.Dashed, lv.getModifyingClasses(classes, \"lv-dashed\"));\r\n                case \"lv-determinate_circle\":\r\n                    return new lv.Circle(element, lv.CircleType.DeterminateCircle, lv.getModifyingClasses(classes, \"lv-determinate_circle\"));\r\n                case \"lv-line\":\r\n                    return new lv.Bar(element, lv.BarType.Line, lv.getModifyingClasses(classes, \"lv-line\"));\r\n                case \"lv-bordered_line\":\r\n                    return new lv.Bar(element, lv.BarType.BorderedLine, lv.getModifyingClasses(classes, \"lv-bordered_line\"));\r\n                case \"lv-determinate_line\":\r\n                    return new lv.Bar(element, lv.BarType.DeterminateLine, lv.getModifyingClasses(classes, \"lv-determinate_line\"));\r\n                case \"lv-determinate_bordered_line\":\r\n                    return new lv.Bar(element, lv.BarType.DeterminateBorderedLine, lv.getModifyingClasses(classes, \"lv-determinate_bordered_line\"));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * observes for changes in DOM and creates new element's objects\r\n     * @param mutationList\r\n     * @param observer\r\n     */\r\n    private callback(mutationList, observer: MutationObserver): void {\r\n        for (let i = 0; i < mutationList.length; i++) {\r\n            if (mutationList[i].type === \"childList\") {\r\n                try {\r\n                    if (mutationList[i].addedNodes[0].classList.length > 0) {\r\n                        // filling the node with divs when it is empty\r\n                        lv.create(mutationList[i].addedNodes[0]);\r\n                    }\r\n                } catch (error) {}\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * initializing the observer and starting observation\r\n     */\r\n    private observer: MutationObserver;\r\n    constructor() {\r\n        this.observer = new MutationObserver(this.callback);\r\n    }\r\n    public startObserving() {\r\n        this.observer.observe(document.body, {childList: true, subtree: true});\r\n    }\r\n    public stopObserving() {\r\n        this.observer.disconnect();\r\n    }\r\n}\r\nnamespace lv {\r\n    interface IDictionary {\r\n        [key: number]: IDescription;\r\n    }\r\n    interface IDescription {\r\n        divCount: number;\r\n        className: string;\r\n    }\r\n\r\n    /**\r\n     * specifies functions same for all elements\r\n     */\r\n    export abstract class ElementBase {\r\n        \r\n        protected element: HTMLDivElement;\r\n        \r\n        constructor(element: HTMLDivElement) {\r\n            this.element = element === null ? document.createElement('div') : element;\r\n        }\r\n\r\n        public show(): void {\r\n            this.element.style.display = null;\r\n        }\r\n\r\n        public hide(): void {\r\n            this.element.style.display = \"none\";\r\n        }\r\n\r\n        public remove(): void {\r\n            this.element.parentNode.removeChild(this.element);\r\n        }\r\n\r\n        public setLabel(labelText: string): void {\r\n            this.element.setAttribute(\"data-label\", labelText);\r\n        }\r\n\r\n        public removeLabel(): void {\r\n            this.element.removeAttribute(\"data-label\");\r\n        }\r\n\r\n        public showPercentage(): void {\r\n            this.element.setAttribute(\"data-percentage\", \"true\");\r\n        }\r\n\r\n        public hidePercentage(): void {\r\n            this.element.removeAttribute(\"data-percentage\");\r\n        }\r\n\r\n        public setId(idText: string): void {\r\n            this.element.setAttribute(\"id\", idText);\r\n        }\r\n\r\n        public removeId(): void {\r\n            this.element.removeAttribute(\"id\");\r\n        }\r\n\r\n        /**\r\n         * adds class or classes to element\r\n         * @param classString - string that contains classes separated with one space\r\n         */\r\n        public addClass(classString: string): void {\r\n            let classList = classString.split(\" \");\r\n            for (let i = 0; i < classList.length; i++) {\r\n                this.element.classList.add(classList[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * if element contains specified class or classes, it/they are removed\r\n         * @param classString - string that contains classes separated with one space\r\n         */\r\n        public removeClass(classString: string): void {\r\n            let classList = classString.split(\" \");\r\n            for (let i = 0; i < classList.length; i++) {\r\n                if (this.element.classList.contains(classList[i])) {\r\n                    this.element.classList.remove(classList[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * returns DOM element - needed for placing or removing the element with jquery\r\n         */\r\n        public getElement(): HTMLDivElement {\r\n            return this.element;\r\n        }\r\n\r\n        /**\r\n         * updates determinate element\r\n         * @param type\r\n         * @param newValue\r\n         * @param maxValue\r\n         */\r\n        public abstract update(type: string, newValue: number, maxValue: number): void;\r\n\r\n        /**\r\n         * resets determinate element to 0\r\n         * @param maxValue\r\n         */\r\n        public reset(maxValue: number): void {\r\n                this.update('set', 0, maxValue);\r\n        }\r\n\r\n        /**\r\n         * sets determinate element to 100%\r\n         * @param maxValue\r\n         */\r\n        public fill(maxValue: number): void {\r\n                this.update('set', maxValue, maxValue);\r\n        }\r\n\r\n        /**\r\n         * adds positive or negative value to a determinate element\r\n         * @param addValue\r\n         * @param maxValue\r\n         */\r\n        public add(addValue: number, maxValue: number): void {\r\n                this.update('add', addValue, maxValue);\r\n        }\r\n\r\n        /**\r\n         * sets loading bar to passed value\r\n         * @param value\r\n         * @param maxValue\r\n         */\r\n        public set(value: number, maxValue: number): void {\r\n                this.update('set', value, maxValue);\r\n        }\r\n\r\n        /**\r\n         * initializes an element\r\n         * @param loaderElement\r\n         * @param description\r\n         */\r\n        public initLoader(loaderElement: HTMLDivElement, description: IDescription): void {\r\n            // manual addition on specified object\r\n            if (!loaderElement.hasChildNodes()) {\r\n                this.fillElement(loaderElement, description.className, description.divCount);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * fills element with appropriate number of divs\r\n         * @param element\r\n         * @param elementClass\r\n         * @param divNumber\r\n         */\r\n        private fillElement(element: HTMLElement, elementClass: string, divNumber: number): void {\r\n            for (let i = 0; i < divNumber; i += 1) {\r\n                element.appendChild(document.createElement(\"DIV\"));\r\n            }\r\n            if (elementClass === \"lv-determinate_circle\" || elementClass === \"lv-determinate_line\" || elementClass === \"lv-determinate_bordered_line\") {\r\n                element.lastElementChild.innerHTML = \"0\";\r\n            }\r\n            if (!element.classList.contains(elementClass)) {\r\n                element.classList.add(elementClass);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * class for linear elements\r\n     */\r\n    export class Bar extends ElementBase {\r\n        private divCount: IDictionary = {};\r\n\r\n        /**\r\n         * creates linear element\r\n         * @param element\r\n         * @param barType\r\n         * @param classes\r\n         */\r\n        constructor(element: HTMLDivElement, barType: BarType, classes: string[] = null) {\r\n            super(element);\r\n            this.divCount[BarType.Line] = {className: \"lv-line\", divCount: 1};\r\n            this.divCount[BarType.BorderedLine] = {className: \"lv-bordered_line\", divCount: 1};\r\n            this.divCount[BarType.DeterminateLine] = {className: \"lv-determinate_line\", divCount: 2};\r\n            this.divCount[BarType.DeterminateBorderedLine] = {className: \"lv-determinate_bordered_line\", divCount: 2};\r\n            this.initLoader(this.element, this.divCount[barType]);\r\n            for (let i = 0; i < classes.length; i++) {\r\n                this.element.classList.add(classes[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * type specific update function for linear element\r\n         * @param type\r\n         * @param newValue\r\n         * @param maxValue\r\n         */\r\n        update(type: string, newValue: number, maxValue: number): void {\r\n            // getting current width of line from the page\r\n            let line: HTMLDivElement = <HTMLDivElement>this.element.firstElementChild;\r\n            let percentage: HTMLDivElement = <HTMLDivElement>this.element.lastElementChild;\r\n            let currentWidth: number = parseFloat(line.style.width);\r\n            // protective condition for empty line\r\n            if (isNaN(currentWidth)) {\r\n                currentWidth = 0;\r\n            }\r\n            // end point of the animation\r\n            let goalWidth: number;\r\n            if (type === \"add\") {\r\n                goalWidth = currentWidth + Math.round((newValue / maxValue) * 1000) / 10;\r\n            } else if (type === \"set\") {\r\n                goalWidth = Math.round((newValue / maxValue) * 1000) / 10;\r\n            }\r\n            // prevent overflow from both sides\r\n            if (goalWidth > 100) {\r\n                goalWidth = 100.0;\r\n            }\r\n            if (goalWidth < 0) {\r\n                goalWidth = 0;\r\n            }\r\n            let animation = setInterval(frame, 5);\r\n            function frame() {\r\n                if (currentWidth > goalWidth) { // shortening the line\r\n                    if (currentWidth < goalWidth + 0.01) {\r\n                        clearInterval(animation);\r\n                    } else {\r\n                        currentWidth -= 0.1;\r\n                    }\r\n                } else { // extending the line\r\n                    if (currentWidth > goalWidth - 0.01) {\r\n                        clearInterval(animation);\r\n                    } else {\r\n                        currentWidth += 0.1;\r\n                    }\r\n                }\r\n                line.style.width = currentWidth + \"%\";\r\n                // updating the percentage\r\n                percentage.innerHTML = currentWidth.toFixed(1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * class for square or circular elements\r\n     */\r\n    export class Circle extends ElementBase {\r\n\r\n        private divCount: IDictionary = {};\r\n\r\n        /**\r\n         * creates square or circular element\r\n         * @param element\r\n         * @param circleType\r\n         * @param classes\r\n         */\r\n        constructor(element: HTMLDivElement, circleType: CircleType, classes: string[] = null) {\r\n            super(element);\r\n            this.divCount[CircleType.Bars] = {className: \"lv-bars\", divCount: 8};\r\n            this.divCount[CircleType.Squares] = {className: \"lv-squares\", divCount: 4};\r\n            this.divCount[CircleType.Circles] = {className: \"lv-circles\", divCount: 12};\r\n            this.divCount[CircleType.Dots] = {className: \"lv-dots\", divCount: 4};\r\n            this.divCount[CircleType.DeterminateCircle] = {className: \"lv-determinate_circle\", divCount: 4};\r\n            this.divCount[CircleType.Spinner] = {className: \"lv-spinner\", divCount: 1};\r\n            this.divCount[CircleType.Dashed] = {className: \"lv-dashed\", divCount: 1};\r\n            this.initLoader(this.element, this.divCount[circleType]);\r\n            for (let i = 0; i < classes.length; i++) {\r\n                this.element.classList.add(classes[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * type specific update function for non-linear elements\r\n         * @param type\r\n         * @param newValue\r\n         * @param maxValue\r\n         */\r\n        update(type: string, newValue: number, maxValue: number): void {\r\n            let rotationOffset: number = -45; // initial rotation of the spinning div in css\r\n            // separating individual parts of the circle\r\n            let background: HTMLDivElement = <HTMLDivElement>this.element.children[0];\r\n            let overlay: HTMLDivElement = <HTMLDivElement>this.element.children[1];\r\n            let spinner: HTMLDivElement = <HTMLDivElement>this.element.children[2];\r\n            let percentage: HTMLDivElement = <HTMLDivElement>this.element.children[3];\r\n            // getting the colors defined in css\r\n            let backgroundColor: string = window.getComputedStyle(background).borderTopColor;\r\n            let spinnerColor: string = window.getComputedStyle(spinner).borderTopColor;\r\n            // computing current rotation of spinning part of circle using rotation matrix\r\n            let rotationMatrix = window.getComputedStyle(spinner).getPropertyValue(\"transform\").split(\"(\")[1].split(\")\")[0].split(\",\");\r\n            let currentAngle: number = Math.round(Math.atan2(parseFloat(rotationMatrix[1]), parseFloat(rotationMatrix[0])) * (180 / Math.PI)) - rotationOffset;\r\n            // safety conditions for full and empty circle (360 <=> 0 and that caused problems)\r\n            if (percentage.innerHTML === \"100\") {\r\n                currentAngle = 360;\r\n            }\r\n            if (currentAngle < 0) {\r\n                currentAngle += 360;\r\n            }\r\n            // end point of the animation\r\n            let goalAngle: number;\r\n            if (type === \"add\") {\r\n                goalAngle = currentAngle + Math.round((newValue / maxValue) * 360);\r\n            } else if (type === \"set\") {\r\n                goalAngle = Math.round((newValue / maxValue) * 360);\r\n            }\r\n            // prevent overflow to both sides\r\n            if (goalAngle > 360) {\r\n                goalAngle = 360;\r\n            }\r\n            if (goalAngle < 0) {\r\n                goalAngle = 0;\r\n            }\r\n            let id = setInterval(frame, 3);\r\n            function frame() {\r\n                if (currentAngle === goalAngle) { // stopping the animation when end point is reached\r\n                    clearInterval(id);\r\n                } else {\r\n                    if (currentAngle < goalAngle) { // \"filling\" the circle\r\n                        if (currentAngle === 90) {\r\n                            background.style.borderRightColor = spinnerColor;\r\n                            overlay.style.borderTopColor = \"transparent\";\r\n                        } else if (currentAngle === 180) {\r\n                            background.style.borderBottomColor = spinnerColor;\r\n                        } else if (currentAngle === 270) {\r\n                            background.style.borderLeftColor = spinnerColor;\r\n                        }\r\n                        currentAngle += 1;\r\n                    } else { // \"emptying the circle\"\r\n                        if (currentAngle === 270) {\r\n                            background.style.borderLeftColor = backgroundColor;\r\n                        } else if (currentAngle === 180) {\r\n                            background.style.borderBottomColor = backgroundColor;\r\n                        } else if (currentAngle === 90) {\r\n                            background.style.borderRightColor = backgroundColor;\r\n                            overlay.style.borderTopColor = backgroundColor;\r\n                        }\r\n                        currentAngle -= 1;\r\n                    }\r\n                    // rotating the circle\r\n                    spinner.style.transform = \"rotate(\" + (rotationOffset + currentAngle).toString() + \"deg)\";\r\n                    // updating percentage\r\n                    percentage.innerHTML = (Math.round((currentAngle / 360) * 100)).toString();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * list of linear elements\r\n     */\r\n    export enum BarType {\r\n        Line,\r\n        BorderedLine,\r\n        DeterminateLine,\r\n        DeterminateBorderedLine,\r\n    }\r\n\r\n    /**\r\n     * list of non-linear elements\r\n     */\r\n    export enum CircleType {\r\n        Bars,\r\n        Squares,\r\n        Circles,\r\n        Dots,\r\n        DeterminateCircle,\r\n        Spinner,\r\n        Dashed,\r\n    }\r\n}"],"names":["$76126548705c4347$var$lv","lv1","this","observer","MutationObserver","callback","prototype","initLoaderAll","divs","document","getElementsByTagName","i","length","hasChildNodes","create","getModifyingClasses","classList","notIncludingClass","modifyingClasses","push","element","classString","classes","listOfClasses","split","Circle","CircleType","Bars","Squares","Circles","Dots","Spinner","Dashed","DeterminateCircle","Bar","BarType","Line","BorderedLine","DeterminateLine","DeterminateBorderedLine","mutationList","type","addedNodes","error","startObserving","observe","body","childList","subtree","stopObserving","disconnect","lv2","ElementBase1","ElementBase","createElement","show","style","display","hide","remove","parentNode","removeChild","setLabel","labelText","setAttribute","removeLabel","removeAttribute","showPercentage","hidePercentage","setId","idText","removeId","addClass","add","removeClass","contains","getElement","reset","maxValue","update","fill","addValue","set","value","initLoader","loaderElement","description","fillElement","className","divCount","elementClass","divNumber","appendChild","lastElementChild","innerHTML","Bar1","_super","barType","_this","call","BarType1","$76126548705c4347$var$__extends","newValue","goalWidth","line","firstElementChild","percentage","currentWidth","parseFloat","width","isNaN","Math","round","animation","setInterval","clearInterval","toFixed","CircleType1","Circle1","circleType","goalAngle","background","children","overlay","spinner","backgroundColor","window","getComputedStyle","borderTopColor","spinnerColor","rotationMatrix","getPropertyValue","currentAngle","atan2","PI","id","borderRightColor","borderBottomColor","borderLeftColor","transform","toString"],"version":3,"file":"index.6cab250d.js.map"}